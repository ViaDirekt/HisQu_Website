---
// src/components/CompareHover.astro
import Image from 'astro/components/Image.astro';

interface Props {
  normal: any;   // ImageMetadata or string
  improved: any; // ImageMetadata or string
  alt?: string;
  class?: string;
}

const { normal, improved, alt = '', class: klass = '' } = Astro.props;
---

<style>
  /* Scoped to this component */
  .clip-reveal {
    /* --pos is percentage (0%..100%) where the vertical divider is located from the left */
    --pos: 0%;
    clip-path: inset(0 calc(100% - var(--pos)) 0 0);
  }

  .no-js .clip-reveal {
    /* If JS is disabled, show 0% reveal (fallback) */
    --pos: 0%;
  }
</style>

<div
  class={`relative group overflow-hidden rounded-3xl ${klass}`}
  aria-label="Bildvergleich: Normal vs. verbessert"
>
  <!-- Base (normal) -->
  <Image
    src={normal}
    alt={alt}
    class="block w-full h-full object-cover select-none pointer-events-none"
    draggable="false"
  />

  <!-- Overlay (improved), clipped by --pos -->
  <div class="absolute inset-0">
    <div class="absolute inset-0 clip-reveal will-change-[clip-path]">
      <Image
        src={improved}
        alt={alt}
        class="block w-full h-full object-cover select-none pointer-events-none"
        draggable="false"
      />
    </div>
  </div>

  <!-- Slider handle -->
  <div
    class="absolute inset-y-0 w-px bg-white/80 pointer-events-none opacity-0 scale-95 origin-center"
    data-handle
    style="left: 0"
    aria-hidden="true"
  ></div>
  <div
    class="absolute top-1/2 -translate-y-1/2 w-4 h-4 rounded-full border border-white/90 bg-white/70 shadow pointer-events-none opacity-0 scale-95"
    data-knob
    style="left: -8px"
    aria-hidden="true"
  ></div>

  <!-- Helper text (screen-readers) -->
  <span class="sr-only">
    Bewege den Mauszeiger über das Bild, um die verbesserte Version über einen Schieberegler zu sehen.
  </span>
</div>

<script type="module">
  import gsap from 'gsap';

  const root = document.currentScript.closest('[aria-label]');
  const overlay = root.querySelector('.clip-reveal');
  const handle = root.querySelector('[data-handle]');
  const knob = root.querySelector('[data-knob]');

  // Quick setters for smooth updates
  const setPosVar = gsap.quickSetter(overlay, 'cssVariable', ''); // we'll pass "--pos: XX%"
  const setHandleX = gsap.quickSetter(handle, 'left', 'px');
  const setKnobX = gsap.quickSetter(knob, 'left', 'px');

  // Animate in/out of the handle & knob
  const showUI = () =>
    gsap.to([handle, knob], { opacity: 1, scale: 1, duration: 0.2, ease: 'power2.out' });
  const hideUI = () =>
    gsap.to([handle, knob], { opacity: 0, scale: 0.95, duration: 0.25, ease: 'power2.out' });

  // Update position based on mouse/touch x within bounds
  function updateFromClientX(clientX, animate = false) {
    const rect = root.getBoundingClientRect();
    let x = clientX - rect.left;
    x = Math.max(0, Math.min(rect.width, x));
    const pct = (x / rect.width) * 100;

    if (animate) {
      gsap.to({}, {
        duration: 0.15,
        onUpdate: function () {
          // Using onUpdate to keep it simple—drive both var & handle together
        }
      });
    }

    // Set CSS var as "--pos: NN%"
    setPosVar(`--pos: ${pct}%`);
    setHandleX(x);
    setKnobX(x - 8); // center the knob (8px = half of 16px width)
  }

  // Start state: fully normal (0%)
  setPosVar('--pos: 0%');
  setHandleX(0);
  setKnobX(-8);

  // Events
  function onEnter(e) {
    showUI();
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    updateFromClientX(clientX, true);
  }
  function onMove(e) {
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    updateFromClientX(clientX);
  }
  function onLeave() {
    hideUI();
    // Animate back to 0%
    gsap.to({}, {
      duration: 0.25,
      onUpdate: function () {},
      onStart: () => {
        // tween the CSS var and handle position together
        const rect = root.getBoundingClientRect();
        gsap.to(handle, { left: 0, duration: 0.25, ease: 'power2.out' });
        gsap.to(knob, { left: -8, duration: 0.25, ease: 'power2.out' });
        gsap.to(overlay, {
          duration: 0.25,
          ease: 'power2.out',
          onUpdate: function () {},
          // Use GSAP to animate a number and set CSS var each tick
          // (works across browsers more consistently than animating clip-path directly)
          // We'll tween a proxy object:
          onStart: () => {
            const proxy = { p: parseFloat(getComputedStyle(overlay).getPropertyValue('--pos')) || 0 };
            gsap.to(proxy, {
              p: 0,
              duration: 0.25,
              ease: 'power2.out',
              onUpdate: () => setPosVar(`--pos: ${proxy.p}%`)
            });
          }
        });
      }
    });
  }

  root.addEventListener('mouseenter', onEnter, { passive: true });
  root.addEventListener('mousemove', onMove, { passive: true });
  root.addEventListener('mouseleave', onLeave, { passive: true });

  // Touch support
  root.addEventListener('touchstart', onEnter, { passive: true });
  root.addEventListener('touchmove', onMove, { passive: true });
  root.addEventListener('touchend', onLeave, { passive: true });
</script>
