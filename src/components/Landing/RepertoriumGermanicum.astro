---
import { Icon } from 'astro-icon/components';
import { rg, rg2_improved, rg2_normal } from '../../assets';
import Image from 'astro/components/Image.astro';
---
<section class="fullscreen-section overflow-hidden flex flex-col justify-end gap-12 pt-40 pb-20" id="repertorium-germanicum" aria-label="Repertorium Germanicum hero">
  <div class="">
    <span class="text-lg md:text-4xl font-bold text-white text-center block ">
      Die Quelle: Das Repertorium Germanicum
    </span>
  </div>
  <div class="flex flex-row gap-16 w-full h-full justify-between max-w-7xl items-center px-4 md:px-16">
    <div class="relative h-full w-full max-w-2xl">
      <div class="image-compare-container relative h-full rounded-xl overflow-hidden">
        <div class="absolute inset-0">
          <img src={rg2_improved.src} alt="Repertorium Germanicum Improved" class="w-full h-full object-contain" />
        </div>
        
        <div class="image-overlay absolute inset-0" style="clip-path: inset(0 0 0 100%);">
          <img src={rg2_normal.src} alt="Repertorium Germanicum Original" class="w-full h-full object-contain" />
        </div>
        
        <div class="slider-line absolute top-0 bottom-0 w-0.5 bg-purple-900 shadow-lg" style="left: 100%;">
          <div class="slider-handle absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-white rounded-full shadow-xl cursor-ew-resize flex items-center justify-center">
            <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col h-full justify-center gap-8" id="facts">
      <div class="fact-item bg-gray-800/20 flex flex-col gap-2 max-w-md p-4 px-5 rounded-xl border-gray-700 border">
      <span class="text-white font-semibold text-base">Strukturierte Tiefenerschließung</span>
      <span class="text-sm ">Aus unstrukturierten Registereinträgen werden normalisierte Entitäten (Personen, Ämter, Orte, Institutionen, Ereignisse) mit kontrollierten Vokabularen extrahiert.</span>
      </div>
      <div class="fact-item bg-gray-800/20 flex flex-col gap-2 max-w-md p-4 px-5 rounded-xl border-gray-700 border">
      <span class="text-white font-semibold text-base">Normdaten & Verknüpfungen</span>
      <span class="text-sm ">Verbindung zu GND, Geo-Referenzen und FactGrid/Wikibase schafft Linked-Data-Kontext und verhindert Redundanzen in der Forschung</span>
      </div>
      <div class="fact-item bg-gray-800/20 flex flex-col gap-2 max-w-md p-4 px-5 rounded-xl border-gray-700 border">
      <span class="text-white font-semibold text-base">Wissenschaftliche Nachvollziehbarkeit</span>
      <span class="text-sm ">Jeder Erschließungsschritt (Transkription, Normalisierung, Typisierung) wird modelliert und maschinenlesbar dokumentiert – Voraussetzung für Reproduzierbarkeit.</span>
      </div>
      <div class="fact-item bg-gray-800/20 flex flex-col gap-2 max-w-md p-4 px-5 rounded-xl border-gray-700 border">
      <span class="text-white font-semibold text-base">Analytischer Mehrwert</span>
      <span class="text-sm ">Ermöglicht quer über Serien hinweg Abfragen zu Karrierewegen, Netzwerkbeziehungen, räumlichen Verdichtungen und institutionellen Wandlungsprozessen.</span>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Select Elements ---
    const section = document.getElementById('solution-section');
    const container = document.querySelector('.image-compare-container');
    const overlay = document.querySelector('.image-overlay');
    const sliderLine = document.querySelector('.slider-line');
    const handle = document.querySelector('.slider-handle');
    const factsContainer = document.getElementById('facts');
    const scrollContainer = document.getElementById('presentation-container');
    
    if (!container || !overlay || !sliderLine || !handle || !section || !factsContainer || !scrollContainer) return;
    
    let isDragging = false;

    // --- Helper Function to Set Slider Position ---
    const setSliderPercentage = (percentage) => {
      const p = Math.max(0, Math.min(100, percentage));
      overlay.style.clipPath = `inset(0 0 0 ${p}%)`;
      sliderLine.style.left = `${p}%`;
    };

    // --- Manual Drag Logic ---
    const updateSliderFromEvent = (e) => {
      const rect = container.getBoundingClientRect();
      const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
      let x = clientX - rect.left;
      
      const percentage = (x / rect.width) * 100;
      setSliderPercentage(percentage);
    };
    
    const removeAnimationClass = () => {
      overlay.classList.remove('slider-animating');
      sliderLine.classList.remove('slider-animating');
    };

    const startDragging = (e) => {
      isDragging = true;
      removeAnimationClass();
      updateSliderFromEvent(e);
      e.preventDefault();
    };
    
    const stopDragging = () => {
      isDragging = false;
    };
    
    const onMove = (e) => {
      if (!isDragging) return;
      updateSliderFromEvent(e);
    };
    
    // Mouse events
    handle.addEventListener('mousedown', startDragging);
    document.addEventListener('mousemove', onMove);
    document.addEventListener('mouseup', stopDragging);
    
    // Touch events
    handle.addEventListener('touchstart', startDragging);
    document.addEventListener('touchmove', onMove);
    document.addEventListener('touchend', stopDragging);
    
    // Click on container to move slider
    container.addEventListener('click', (e) => {
      if (!isDragging) {
        removeAnimationClass();
        updateSliderFromEvent(e);
      }
    });

    // --- Viewport Animation Logic ---
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Use isIntersecting AND a bounding rect check for more reliability
        if (entry.isIntersecting && entry.intersectionRatio >= 0.75) {
          // 1. Trigger info box animation
          factsContainer.classList.add('is-visible');
          
          // 2. Trigger slider animation
          overlay.classList.add('slider-animating');
          sliderLine.classList.add('slider-animating');
          
          setTimeout(() => {
            setSliderPercentage(25);
          }, 50); 
          
          // 3. Stop observing to prevent re-animation
          observer.unobserve(section);
        }
      });
    }, {
      root: scrollContainer, 
      // *** THE FIX ***
      // Wait until 75% of the section is visible.
      // This stops it from firing too early during a scroll-snap.
      threshold: 0.75 
    });

    // Start observing the section
    observer.observe(section);
  });
</script>

<style>
  /* ... your styles ... */
  .image-compare-container {
    user-select: none;
    -webkit-user-select: none;
    overflow: hidden;
  }
  
  .slider-handle {
    transition: transform 0.1s ease;
  }
  
  .slider-handle:active {
    transform: translate(-50%, -50%) scale(0.95); /* Centered transform */
  }

  /* --- Animation for Slider --- */
  .image-overlay.slider-animating {
    transition: clip-path 1.5s cubic-bezier(0.25, 1, 0.5, 1);
  }
  .slider-line.slider-animating {
    transition: left 1.5s cubic-bezier(0.25, 1, 0.5, 1);
  }

  /* --- Animation for Info Boxes --- */
  .fact-item {
    opacity: 0;
    transform: translateX(30px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  #facts.is-visible .fact-item {
    opacity: 1;
    transform: translateX(0);
  }
  
  #facts.is-visible .fact-item:nth-child(1) {
    transition-delay: 0.2s;
  }
  #facts.is-visible .fact-item:nth-child(2) {
    transition-delay: 0.4s;
  }
  #facts.is-visible .fact-item:nth-child(3) {
    transition-delay: 0.6s;
  }
  #facts.is-visible .fact-item:nth-child(4) {
    transition-delay: 0.8s;
  }
</style>