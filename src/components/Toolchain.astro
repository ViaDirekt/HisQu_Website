---
import {rg} from "../assets";
import {steps} from "../consts";

interface RGPoint { title: string; text: string }
interface Props {
    title?: string; description?: string; eyebrow?: string;
    rgTitle?: string; rgDescription?: string;
    rgImage?: { src: any; alt?: string };
    rgPoints?: RGPoint[];
    gradientFrom?: string; gradientTo?: string; class?: string;
}

function resolveImg(src: any) {
    if (!src) return '';
    if (typeof src === 'object' && 'src' in src) return (src as any).src;
    return String(src);
}

const {
    title = "Ein Forschungsprozess ohne Unterbrechungen nach den FAIR-Prinzipien",
    description = "In den digitalen Geisteswissenschaften dominieren bislang digitale Editionen und punktuelle „Insel-Lösungen“ – Tools und Skripte, die nur für ein spezifisches Forschungsproblem entwickelt wurden. Ein geschlossener digitaler Forschungsdatenzyklus fehlt, wodurch Nachvollziehbarkeit, Reproduzierbarkeit und nachhaltige Archivierung oft nicht gewährleistet sind. HisQu setzt hier an und entwickelt eine fachspezifische Lösung, die historische Quellen und Forschungsprozesse gezielt digital unterstützt und den Forschungsworkflow nahtlos zusammenführt.",
    eyebrow = "Ein lückenloser Prozess",

    rgTitle = `Die Quelle: Das Repertorium Germanicum`,
    rgDescription = "Das Repertorium Germanicum (RG) erschließt die in den päpstlichen Registerserien überlieferten Bezüge zum Heiligen Römischen Reich (Personen, Orte, Institutionen, Rechtsakte). Es bildet damit eine der zentralen Grundlagen für prosopographische und regionalhistorische Analysen der spätmittelalterlichen Kurie und ihrer Kommunikations- und Interaktionsräume.",
    rgImage = {src: rg, alt: "Schemahafte Darstellung der kurialen Register als Datenquelle"},
    rgPoints = [
        {
            title: "Strukturierte Tiefenerschließung",
            text: "Aus unstrukturierten Registereinträgen werden normalisierte Entitäten (Personen, Ämter, Orte, Institutionen, Ereignisse) mit kontrollierten Vokabularen extrahiert."
        },
        {
            title: "Normdaten & Verknüpfungen",
            text: "Verbindung zu GND, Geo-Referenzen und FactGrid/Wikibase schafft Linked-Data-Kontext und verhindert Redundanzen in der Forschung."
        },
        {
            title: "Wissenschaftliche Nachvollziehbarkeit",
            text: "Jeder Erschließungsschritt (Transkription, Normalisierung, Typisierung) wird modelliert und maschinenlesbar dokumentiert – Voraussetzung für Reproduzierbarkeit."
        },
        {
            title: "Analytischer Mehrwert",
            text: "Ermöglicht quer über Serien hinweg Abfragen zu Karrierewegen, Netzwerkbeziehungen, räumlichen Verdichtungen und institutionellen Wandlungsprozessen."
        },
    ],

    gradientFrom = "#ff80b5",
    gradientTo = "#9089fc",
    class: outerClass = "",
} = Astro.props as Props;
---

<section class={`relative isolate h-full overflow-y-auto ${outerClass}`} aria-label={title} id="toolchain">
    <!-- Hintergrund-Deko -->
    <div class="absolute top-0 right-0 left-1/2 -z-10 -ml-24 transform-gpu overflow-hidden blur-3xl lg:ml-24 xl:ml-48"
         aria-hidden="true">
        <div class="aspect-[801/1036] w-[50.0625rem]"
             style={`background-image: linear-gradient(to top right, ${gradientFrom}, ${gradientTo}); opacity:0.3; clip-path: polygon(63.1% 29.5%,100% 17.1%,76.6% 3%,48.4% 0%,44.6% 4.7%,54.5% 25.3%,59.8% 49%,55.2% 57.8%,44.4% 57.2%,27.8% 47.9%,35.1% 81.5%,0% 97.7%,39.2% 100%,35.2% 81.4%,97.2% 52.8%,63.1% 29.5%)`}>
        </div>
    </div>

    <div class="px-6 pt-24 pb-16 sm:pt-40 lg:px-8 lg:pt-32">
        <div class="py-24 sm:py-32">
            <div class="px-6 lg:px-8">
                <div class="mx-auto max-w-3xl lg:mx-0">
                    {eyebrow && (
                            <p class="text-base/7 font-semibold text-indigo-600 dark:text-indigo-400">{eyebrow}</p>)}
                    <h2 class="mt-2 text-5xl font-semibold tracking-tight text-gray-900 sm:text-7xl dark:text-white">{title}</h2>
                    <p class="mt-8 text-lg font-medium text-pretty text-gray-500 sm:text-xl/8 dark:text-gray-400">{description}</p>
                </div>
            </div>
        </div>

        <!-- RG Explanation-->
        <div class="relative mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="mx-auto grid max-w-6xl grid-cols-1 gap-x-8 gap-y-12 lg:grid-cols-12 lg:items-center">
                <!-- Only visual effect -->
                <div aria-hidden="true"
                     class="pointer-events-none absolute top-1/2 left-12 -z-10 -translate-y-1/2 transform-gpu blur-3xl lg:top-auto lg:-bottom-48 lg:translate-y-0">
                    <div style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"
                         class="aspect-1155/678 w-288.75 bg-linear-to-tr from-[#ff80b5] to-[#9089fc] opacity-25 dark:opacity-20"></div>
                </div>

                <!-- Visual (optional) -->
                {rgImage?.src && (
                    <div class="lg:col-span-7">
                        <img
                            src={resolveImg(rgImage.src)}
                            alt={rgImage.alt ?? ""}
                            class="relative -z-0 w-full max-w-4xl rounded-xl shadow-xl ring-1 ring-gray-900/10 dark:ring-white/10"
                            loading="lazy"
                        />
                    </div>
                )}

                <!-- Text -->
                <div class="lg:col-span-5">
                    <h3 class="text-3xl font-semibold tracking-tight text-gray-900 dark:text-white">{rgTitle}</h3>
                    <p class="mt-6 text-lg/8 text-gray-600 dark:text-gray-300">{rgDescription}</p>

                    <ul class="mt-10 space-y-4 list-disc pl-6 marker:text-gray-400 dark:marker:text-gray-500">
                        {rgPoints.map((p, idx) => (
                            <li aria-label={`rg-point-${idx}`} class="text-gray-600 dark:text-gray-300">
                                <span class="block font-semibold text-gray-900 dark:text-white mb-1">{p.title}</span>
                                <span>{p.text}</span>
                            </li>
                        ))}
                    </ul>
                </div>
            </div>

            <!-- decorative colourful blur “dot/cloud” kept -->
            <div aria-hidden="true"
                 class="pointer-events-none absolute left-12 top-1/2 -z-10 -translate-y-1/2 transform-gpu blur-3xl lg:top-auto lg:-bottom-48 lg:translate-y-0">
                <div
                        class="aspect-[1155/678] w-[18rem] opacity-25 dark:opacity-20"
                        style={`clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%); background-image: linear-gradient(to top right, ${gradientFrom}, ${gradientTo});`}>
                </div>
            </div>
        </div>

        <!-- Prozess-Schritte (Astro-kompatibel, konsistente Einrückung & Buttons) -->
        <div class="mt-24 space-y-24">
            {steps.map((step, i) => (
                    <div class="mx-auto grid max-w-6xl grid-cols-1 items-center gap-y-10 gap-x-8 lg:grid-cols-12">
                        <!-- Text-Spalte -->
                        <div class={`lg:col-span-6 ${i % 2 === 0 ? 'lg:order-1' : 'lg:order-2'}`}>
                            <h2 class="text-2xl font-semibold text-gray-900 dark:text-white">{step.title}</h2>
                            <span class="mt-2 text-xl font-medium text-purple-600 dark:text-purple-400">{step.subtitle}</span>
                            <p class="mt-4 text-base text-gray-600 dark:text-gray-300">{step.description}</p>

                            {step.tools && step.tools.length > 0 && (
                                    <div class="mt-6 flex flex-wrap gap-3">
                                        {step.tools.map((tool) => (
                                                <a
                                                        href={tool.href}
                                                        class="group inline-flex items-center gap-2 rounded-xl border border-gray-200 px-3 py-2 text-sm font-medium text-gray-700 shadow-sm ring-1 ring-inset ring-gray-900/5 hover:shadow-md hover:ring-gray-900/10 dark:border-white/10 dark:text-gray-200 dark:ring-white/10"
                                                        aria-label={`Öffne Tool: ${tool.name}`}
                                                >
                                                    {tool.image?.src && (
                                                        <img
                                                            src={resolveImg(tool.image.src)}
                                                            alt={tool.image.alt ?? ""}
                                                            width={24}
                                                            height={24}
                                                            class="h-6 w-6 rounded-md ring-1 ring-black/5 dark:ring-white/10"
                                                            loading="lazy"
                                                        />
                                                    )}
                                                    <span class="relative">
                  {tool.name}
                                                        <span
                                                                class="absolute -bottom-1 left-0 h-0.5 w-0 bg-gradient-to-r from-[var(--grad-from)] to-[var(--grad-to)] transition-all duration-200 group-hover:w-full"
                                                                style={`--grad-from:${gradientFrom}; --grad-to:${gradientTo};`}
                                                                aria-hidden="true"
                                                        />
                </span>
                                                </a>
                                        ))}
                                    </div>
                            )}
                        </div>

                        <!-- Bild-Spalte -->
                        <div class={`lg:col-span-6 ${i % 2 === 0 ? 'lg:order-2' : 'lg:order-1'}`}>
                            <img
                                src={resolveImg(step.image.src)}
                                alt={step.image.alt ?? ""}
                                class="w-full rounded-xl shadow-lg ring-1 ring-gray-900/10 dark:ring-white/10 bg-white p-2"
                                loading="lazy"
                            />
                            {step.caption && (
                                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400 italic">{step.caption}</p>
                            )}
                        </div>
                    </div>
            ))}
        </div>
    </div>
</section>
